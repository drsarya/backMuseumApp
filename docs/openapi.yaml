openapi: 3.0.1
info:
  title: Mini Uber
  description: Mini-uber API description
  version: 0.1.0
servers:
- url: https://127.0.0.1:8080/api
- url: http://127.0.0.1:8080/api
tags:
- name: user
  description: Operations about user
paths:
  /users:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: User object that should be created
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/NewUser'
        required: true
      responses:
        201:
          description: User successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExistingUser'
        400:
          description: Data is invalid
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidded
          content: {}
      x-codegen-request-body-name: body
    get:
      tags: 
      - user
      summary: Retrieves users list from database
      description: This can only be done by the logged in user.
      operationId: getUsers
      parameters: 
        - name: search
          in: query
          description: used to filter users by their name, phone or email
          schema:
            type: string
        - name: offset
          in: query
          schema:
            type: number
            minimum: 0
        - name: limit
          in: query
          schema:
            type: number
            minimum: 1
      responses:
        200:
          description: list of existing users
          content:
            application/json:
              schema:
                type: object
                required: 
                  - total
                  - items
                properties:
                  total:
                    type: integer
                    minimum: 1
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/ExistingUser'
        400:
          description: Data is invalid
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidded
          content: {}
  /users/{id}:
    get:
      tags:
      - user
      summary: Get user by its ID
      operationId: getUserByName
      parameters:
      - name: id
        in: path
        description: 'id of the user to fetch'
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExistingUser'
        400:
          description: Data is invalid
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ErrorResponse'
        404:
          description: User not found
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidded
          content: {}
    put:
      tags:
      - user
      summary: Updates user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: id
        in: path
        description: id of the user that need to be updated
        required: true
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatableUser'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExistingUser'
        400:
          description: Invalid user supplied
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ErrorResponse'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidded
          content: {}
        404:
          description: User not found
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: id
        in: path
        description: ID of the user that needs to be deleted
        required: true
        schema:
          type: number
          format: int64
      responses:
        400:
          description: Invalid userid supplied
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidded
          content: {}
        404:
          description: User not found
          content: {}
components:
  schemas:
    NewUser:
      type: object
      properties:
        username:
          maxLength: 64
          minLength: 5
          type: string
          example: John
        password:
          maxLength: 128
          minLength: 8
          type: string
          example: Password
        role:
          type: string
          example: ADMIN
          enum:
          - ADMIN
          - DRIVER
          - CLIENT
        personalInfo:
          type: object
          properties:
            firstName:
              maxLength: 50
              minLength: 1
              type: string
              description: First name of the user
            lastName:
              maxLength: 50
              minLength: 1
              type: string
            email:
              minLength: 5
              type: string
            phone:
              maxLength: 15
              type: string
    UpdatableUser:
      type: object
      properties:
        role:
          type: string
          example: ADMIN
          enum:
          - ADMIN
          - DRIVER
          - CLIENT
        personalInfo:
          type: object
          required: 
            - phone
          properties:
            firstName:
              maxLength: 50
              minLength: 1
              type: string
              description: First name of the user
            lastName:
              maxLength: 50
              minLength: 1
              type: string
            email:
              minLength: 5
              type: string
            phone:
              maxLength: 15
              type: string
            status:
              $ref: '#/components/schemas/UserStatus'
    ExistingUser:
      type: object
      required: 
        - id
        - username
        - role
        - personalInfo
        - createdAt
        - createdBy
      properties:
        id:
          minimum: 1
          type: integer
          format: int64
        username:
          maxLength: 64
          minLength: 5
          type: string
          example: John
        role:
          type: string
          example: ADMIN
          enum:
          - ADMIN
          - DRIVER
          - CLIENT
        personalInfo:
          type: object
          required: 
            - phone
          properties:
            firstName:
              maxLength: 50
              minLength: 1
              type: string
              description: First name of the user
            lastName:
              maxLength: 50
              minLength: 1
              type: string
            email:
              minLength: 5
              type: string
            phone:
              maxLength: 15
              type: string
        createdAt:
          type: string
          format: date-time
          example: 2020-07-13T10:30:00Z
        createdBy:
          minimum: 1
          type: integer
          format: int64
        status:
          $ref: '#/components/schemas/UserStatus'
    ErrorResponse:
      type: object
      required: 
        - code
        - description
      properties:
        code:
          type: string
        description:
          type: string
        payload:
          type: object
          properties: {}
    UserStatus:
      type: object
      required: 
      - active
      - locked
      properties:
        active:
          type: boolean
        locked:
          type: boolean
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
      xml:
        name: User
